#!/usr/bin/env python
# 
#  Copyright (C) 2004-2011  Smithsonian Astrophysical Observatory
#
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#


import sys
import os

def CheckForChips (serverId):
   '''Check to see if a chips server is running given a ds9 id'''

   # get a list of servers to see if ds9 is running. unless the users has
   # a bunch of dead servers lying around this will be faster than
   # checking if the server is running since that has a timeout associated with it
   chipsServerFiles = chips.list_servers ()
   for serverFile in chipsServerFiles:
      if serverFile == serverId:
         return True

   # no server was found 
   return False


def StartChips (serverId):
   '''Start a chips server if one does not exists for the current ds9'''

   # if the server has not been started create a server using
   # the ds9 xpa accessor as a unique id
   # -- do we want to load the users preferences? Yes?
   if not CheckForChips (serverId):
      chips.create_server(True, serverId);
   else:
      chips.connect(serverId)

def PollForDS9 (ds9XPA):

   import subprocess
   import time

   # I don't know how compatible this is cross platform -- may need
   # more thought
   p1 = subprocess.Popen (['xpaaccess', ds9XPA], stdout=subprocess.PIPE)
   access = False
   output = p1.communicate ()[0]

   # loop until either the file changes or ds9 closes
   while len (output) > 0 and output.rstrip() == 'yes':

      # the sleep is kind of large but hopefully this routine is just a failsafe
      # the calling process should terminate the script
      time.sleep (10)

      # check ds9 still active
      p1 = subprocess.Popen (['xpaaccess', ds9XPA], stdout=subprocess.PIPE)
      access = False
      output = p1.communicate ()[0]

def warning_msg( msg ) :
   sys.stderr.write( msg )


if __name__ == '__main__':

   pkgNotLoad     = 0  # can't find chips pkg
   pkgIsLoad      = 1  # find chips pkg

   pkg_flag =  pkgIsLoad
   try :
        import pychips as chips
   except :
        warning_msg("WARNING: Couldn't load ChIPS. continue plotting w/ BLT.\n");
        pkg_flag = pkgNotLoad
        pass
   if ( pkg_flag == pkgIsLoad ) :
      ee = os.environ.get("ASCDS_INSTALL") + r'/bin/chipsServer'
      if os.path.exists(ee) == False :
         warning_msg("WARNING: couldn't load ChIPS. continue plotting w/ BLT.\n");
         pkg_flag = pkgNotLoad

   if len (sys.argv) == 1:
      raise UsageError ('Missing ds9 PID input -- startchips.py <ds9 xpaaccess>')
   else:
      ds9XPA = sys.argv[1]

   if ( pkg_flag == pkgIsLoad ) :
      # start chips and connect to it and wait for ds9 to close 
      StartChips (ds9XPA)
      try:
         PollForDS9 (ds9XPA)
      except KeyboardInterrupt:
         pass
